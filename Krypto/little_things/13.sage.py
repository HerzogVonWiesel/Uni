

# This file was *autogenerated* from the file 13.sage
from sage.all_cmdline import *   # import sage library

_sage_const_30030 = Integer(30030); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_18 = Integer(18); _sage_const_1921984 = Integer(1921984); _sage_const_3 = Integer(3); _sage_const_1911984 = Integer(1911984); _sage_const_2 = Integer(2); _sage_const_754428 = Integer(754428); _sage_const_119194 = Integer(119194)
from sage.all import *

n= _sage_const_30030 

def decrypt():
    P = PolynomialRing(Zmod(n), 'x', implementation='NTL')
    (x,) = P._first_ngens(_sage_const_1 )
    for m_length in range(_sage_const_0 , _sage_const_8 *_sage_const_18 ):
        invo = pow(_sage_const_1921984 , -_sage_const_1 , n)
        print(invo)
        f = x**_sage_const_3  + (_sage_const_1911984 *invo)*x**_sage_const_2  + (_sage_const_754428 *invo)*x + (_sage_const_119194 *invo)
        m = f.small_roots()
        if m:
            try:
                return long_to_bytes(int(m[_sage_const_0 ]))
            except UnicodeDecodeError:
                pass
        

print(decrypt())

